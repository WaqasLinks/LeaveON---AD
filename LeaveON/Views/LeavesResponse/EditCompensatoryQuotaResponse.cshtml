@model Repository.Models.Leave

@{
  ViewBag.Title = "Edit";
  Layout = "~/Views/Shared/_Layout.cshtml";
}






<!-- left column -->
<div class="col-md-6">
  <!-- general form elements -->
  <div class="card card-primary">
    <div class="card-header">
      <h3 class="card-title">Approve Compensatory Leave Quota</h3>
    </div>
    <!-- /.card-header -->
    <!-- form start -->


    @using (Html.BeginForm())
    {
      @Html.AntiForgeryToken()


      <div class="card-body">



        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @*@Html.Hidden("IsLineManager1",ViewBag.IsLineManager1)*@
        <input name="IsLineManager1" type="hidden" value="@(Convert.ToString(ViewBag.IsLineManager1))" />
        <div class="form-group">
          @*@Html.LabelFor(model => model.UserId, "User", htmlAttributes: new { @class = " " })

            @Html.EditorFor(model => model.UserId, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })*@

          @Html.Label("User Name")
          @Html.Editor("UserName", new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.ApplicantName, @readonly = "readonly" } })

        </div>

        <div class="form-group">
          @Html.LabelFor(model => model.LeaveTypeId, "Leave Type", htmlAttributes: new { @class = " " })

          @Html.DropDownList("LeaveTypeId", null, htmlAttributes: new { @class = "form-control", disabled = "disabled" })
          @Html.ValidationMessageFor(model => model.LeaveTypeId, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
          @Html.LabelFor(model => model.Reason, "Reason", htmlAttributes: new { @class = " " })

          @Html.TextAreaFor(model => model.Reason, new { @class = "form-control", rows = "3", disabled = "disabled" })
          @Html.ValidationMessageFor(model => model.Reason, "", new { @class = "text-danger" })

        </div>



        <div class="form-group">
          @Html.LabelFor(model => model.StartDate, "Start Date", htmlAttributes: new { @class = " " })

          @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
          @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
          @Html.LabelFor(model => model.EndDate, "End Date", htmlAttributes: new { @class = " " })

          @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
          @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })

        </div>


        <div class="form-group">
          @*@Html.LabelFor(model => model.TotalDays, "Total Days", htmlAttributes: new { @class = " " })*@

          @Html.HiddenFor(model => model.TotalDays, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
          @Html.ValidationMessageFor(model => model.TotalDays, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
          @Html.LabelFor(model => model.EmergencyContact, "Emergency Contact", htmlAttributes: new { @class = " " })

          @Html.EditorFor(model => model.EmergencyContact, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
          @Html.ValidationMessageFor(model => model.EmergencyContact, "", new { @class = "text-danger" })

        </div>
        <hr />
        @if ((bool)ViewBag.IsLineManager1 == true)
        {
          <div class="form-group">
            @Html.LabelFor(model => model.LineManager1Id, "Line Manager 1", htmlAttributes: new { @class = " " })

            @*@Html.EditorFor(model => model.LineManager1Id, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.DropDownList("LineManager1Id", (IEnumerable<SelectListItem>)ViewBag.LineManagers, null, new { @class = "form-control", disabled = "disabled" })
            @Html.ValidationMessageFor(model => model.LineManager1Id, "", new { @class = "text-danger" })

          </div>

          <div class="form-group">
            @*@Html.LabelFor(model => model.IsAccepted1, "Status Line Manager 1", htmlAttributes: new { @class = " " })

              @Html.EditorFor(model => model.IsAccepted1, new { htmlAttributes = new { @class = "form-control" } })
              @Html.ValidationMessageFor(model => model.IsAccepted1, "", new { @class = "text-danger" })*@

            <input type="radio" name="IsAccepted1" id="rdoAccepted1" value="1" checked> Approved |
            @*<input type="radio" name="IsAccepted1" id="rdoAcceptedWithComments1" value="2" checked="@(ViewBag.AcceptStatus1)"> Approved With Comments |*@
            <input type="radio" name="IsAccepted1" id="rdoRejected1" value="0" checked="@(ViewBag.AcceptStatus1)"> Rejected


          </div>

          @*<div class="form-group" id="divRemarks1" style="display: none">*@
          <div class="form-group" id="divRemarks1">
            @*<div class="form-group">
                @Html.LabelFor(model => model.StartDate, "Start Date", htmlAttributes: new { @class = " " })

                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control datepickerStart", @id = "datepickerStart1", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })

              </div>*@

            @*<div class="form-group">
                @Html.LabelFor(model => model.EndDate, "End Date", htmlAttributes: new { @class = " " })

                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control datepickerEnd", @id = "datepickerEnd1", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })

              </div>*@

            @Html.LabelFor(model => model.Remarks1, "Remarks", htmlAttributes: new { @class = " " })
            @Html.EditorFor(model => model.Remarks1, new { htmlAttributes = new { @class = "form-control diff", @id = "diff1", placeholder = "Remarks..." } })
            @Html.ValidationMessageFor(model => model.Remarks1, "", new { @class = "text-danger" })
          </div>


        }
        else
        {
          <div class="form-group">
            @Html.LabelFor(model => model.LineManager2Id, "Line Manager 2", htmlAttributes: new { @class = " " })

            @*@Html.EditorFor(model => model.LineManager2Id, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.DropDownList("LineManager2Id", (IEnumerable<SelectListItem>)ViewBag.LineManagers, null, new { @class = "form-control", disabled = "disabled" })
            @Html.ValidationMessageFor(model => model.LineManager2Id, "", new { @class = "text-danger" })

          </div>

          <div class="form-group">

            @*@Html.LabelFor(model => model.IsAccepted2, "Status Line Manager 2", htmlAttributes: new { @class = " " })

              @Html.EditorFor(model => model.IsAccepted2, new { htmlAttributes = new { @class = "form-control" } })
              @Html.ValidationMessageFor(model => model.IsAccepted2, "", new { @class = "text-danger" })*@

            <input type="radio" name="IsAccepted2" id="rdoAccepted2" value="1" checked>Approved
            @*<input type="radio" name="IsAccepted2" id="rdoAcceptedWithComments2" value="2" checked="@(ViewBag.AcceptStatus2)">Approved With Comments |*@
            <input type="radio" name="IsAccepted2" id="rdoRejected2" value="0" checked="@(ViewBag.AcceptStatus2)">Rejected

          </div>


          @*<div class="form-group" id="divRemarks2" style="display: none">*@
          <div class="form-group" id="divRemarks2">

            @*<div class="form-group">
                @Html.LabelFor(model => model.StartDate, "Start Date", htmlAttributes: new { @class = " " })

                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control datepickerStart", @id = "datepickerStart2", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })

              </div>*@

            @*<div class="form-group">
                @Html.LabelFor(model => model.EndDate, "End Date", htmlAttributes: new { @class = " " })

                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control datepickerEnd", @id = "datepickerEnd2", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })

              </div>*@

            @Html.LabelFor(model => model.Remarks2, "Remarks", htmlAttributes: new { @class = " " })

            @Html.EditorFor(model => model.Remarks2, new { htmlAttributes = new { @class = "form-control diff", @id = "diff2", placeholder = "Remarks..." } })
            @Html.ValidationMessageFor(model => model.Remarks2, "", new { @class = "text-danger" })

          </div>
        }
        <div class="form-group">
          <div class="class=" card-footer">
            <input type="submit" value="Send" class="btn btn-primary" />
          </div>
        </div>
        <br />
        @Html.ActionLink("Back to List", "Index")
      </div>

    }
  </div>



</div>


<div id="UserLeavePolicyData" class="col-md-6"></div>
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<link rel="stylesheet" href="/resources/demos/style.css">
@*<script src="https://code.jquery.com/jquery-1.12.4.js"></script>*@
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script>

  $(function () {
    @*alert(@ViewBag.UserLeavePolicyId);*@
  @*$.get('@Url.Action("Edit","UserLeavePolicies")?id=' + "@ViewBag.UserLeavePolicyId" + '&Caller=' + "LeaveResponse", function (data) {
        $("#UserLeavePolicyData").append(data);
    });*@

     $.get('@Url.Action("Edit","UserLeavePolicies")?id=' + "@ViewBag.UserLeavePolicyId" + '&Caller=' + "LeaveResponse" + "&leaveUserId=" + "@ViewBag.LeaveUserId" , function (data) {
        $("#UserLeavePolicyData").append(data);
      })

  });

  $(document).ready(function () {

    //$("#Remarks1,#Remarks2").keypress(function (e) {
    //  var charCode = (e.which) ? e.which : e.keyCode;
    //  if (charCode > 31 && (charCode < 48 || charCode > 57)) {
    //    return false;
    //  }
    //});

    //$(".diff").keypress(function (e){
    //  var charCode = (e.which) ? e.which : e.keyCode;
    //  if (charCode > 31 && (charCode < 48 || charCode > 57)) {
    //    return false;
    //  }
    //});

     //$(".diff").change(function(){
     //   $('#TotalDays').val($(this).val());
     //});

    @*$('#diff1').val(@Model.TotalDays);
    $('#diff2').val(@Model.TotalDays);*@

    //$('input[name="IsAccepted1"]').on('click', function () {
    //  //alert('1');
    //  if ($(this).val() == '2') {
    //    //alert('2');
    //    $('#divRemarks1').show();
    //  }
    //  else {
    //    //alert('3');
    //    $('#divRemarks1').hide();
    //  }
    //});

    //$('input[name="IsAccepted2"]').on('click', function () {
    //  //alert('1');
    //  if ($(this).val() == '2') {
    //    //alert('2');
    //    $('#divRemarks2').show();
    //  }
    //  else {
    //    //alert('3');
    //    $('#divRemarks2').hide();
    //  }
    //});

    $(".datepickerStart").datepicker({
        showOtherMonths: true,
        selectOtherMonths: true,
        changeMonth: true,
        changeYear: true,
        numberOfMonths: 2,
        dateFormat: 'DD, MM, d, yy',
        showOn: "both",
        onSelect: function () {
        myfunc();
      }
        //showButtonPanel: true


        //buttonImage: "images/calendar.gif",
        //buttonImageOnly: true,
        //buttonText: "Select date",

        //minDate: -20,
        //maxDate: "+1M +10D"
    });

    $(".datepickerEnd").datepicker({
      showOtherMonths: true,
      selectOtherMonths: true,
      changeMonth: true,
      changeYear: true,
      numberOfMonths: 2,
      dateFormat: 'DD, MM, d, yy',
      showOn: "both",
      onSelect: function () {
        myfunc();

      }
    });

    function myfunc() {
      var start = $(".datepickerStart").datepicker("getDate");
      var end = $(".datepickerEnd").datepicker("getDate");
      var diff = new Date(end - start);

      var days = diff / 1000 / 60 / 60 / 24 + 1;

      $('#diff1').val(days);
      $('#diff2').val(days);
      $('#TotalDays').val(days);

    }



  });
</script>

@*@section Scripts {
      @Scripts.Render("~/bundles/jqueryval")
  }*@

